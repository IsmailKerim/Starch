
=pod



=head1 NAME

Starch::Manual::Extending - How to alter and add functionality Starch.



=head1 DESCRIPTION

Starch was designed from the ground-up to be easy to extend.  Read below
about the various ways that Starch can be extended.



=head1 PLUGINS

Plugins can modify any of the manager (L<Starch>), session (L<Starch::Session>),
and store (L<Starch::Store>) classes to extend functionality.

A plugin may extend several of these classes, via plugin bundles, or just one.  A common
setup is a plugin bundle which adds arguments to the manager object and then adds logic
to the session objects which acts upon the arguments.

See L<Starch::Plugin::CookieArgs> for a basic example plugin.  See
L<Starch::Manual/PLUGINS> for more existing plugins.

See the SYNOPSIS in L<Starch::Plugin::Bundle>, L<Starch::Plugin::ForManager>,
L<Starch::Plugin::ForSession>, and L<Starch::Plugin::ForStore> documentation
for some decent boilerplate for writing new plugins.

Plugins and plugin bundles are applied by L<Starch::Factory>, which itself
acts as a dynamic plugin bundle.



=head1 STORES

Stores provide the data persistance layers for stores so that, from HTTP request
to request, the data set in the store is available to get.

See L<Starch::Store::Memory> for a basic example store.  See
L<Starch::Manual/STORES> for more existing stores.

A store must implement the C<set>, C<get>, and C<remove> methods and consume
the L<Starch::Store> role.

Writing new stores is generally a trivial process where the store class does
nothing more than glue those three methods with some underlying implementation
such as L<DBI> or L<CHI>.

Stores should be written so that the underlying driver object (the C<$dbh>
for a DBI store, for example) can be passed as an argument.   This allows
the user to utilize L<Starch::Manual/METHOD PROXIES> to build their
own driver objects.

Some boilerplate for getting a store going:

    package Starch::Store::FooBar;
    
    use Foo::Bar;
    use Types::Standard -types;
    
    use strictures 2;
    use namespace::clean;
    use Moo;
    
    with qw(
        Starch::Store
    );
    
    has foobar => (
        is => 'lazy',
        isa => InstanceOf[ 'Foo::Bar' ],
    );
    sub _build_foobar {
        return Foo::Bar->new();
    }
    
    sub set {
        my ($self, $key, $data, $expires) = @_;
        $self->foobar->set( $key, $data, $expires );
        return;
    }
    
    sub get {
        my ($self, $key) = @_;
        return $self->foobar->get( $key );
    }
    
    sub remove {
        my ($self, $key) = @_;
        $self->foobar->remove( $key );
        return;
    }
    
    1;
`
Many stores benefit from building their lazy-loaded driver object early,
as in:

    sub BUILD {
        my ($self) = @_;
        $self->foobar();
        return;
    }

A session's expires duration is stored in the session data under the
L<Starch/expires_session_key>.  This should B<not> be considered
as anything meaningful to the store, since stores can have their
L<Starch::Store/max_expires> argument set which will automatically
change the value of the C<expires> argument passed to C<set>.



=head2 REQUIRED METHODS

A more detailed description of the methods that a store must
implement:

=over

=item *

B<set> - Sets the data for the key.  The C<$expires> value will always be set and
will be either C<0> or a postive integer representing the number of seconds
in the future that this session data should be expired.  If C<0> then the
store may expire the data whenever it chooses.

=item *

B<get> - Returns the data for the given key.  If the data was not found then
C<undef> is returned.

=item *

B<remove> - Deletes the data for the key.  If the data does not exist then
this is just a no-op.

=back

While these three methods typically receive a session ID as their first
argument, the store code should be written more generically to treat it
as just a key.  This is because there may be plugins wich alter the key,
perhaps by extending it or dividing a single session's data into many keys.



=head2 EXCEPTIONS

Stores should detect issues and throw exceptions loudly.  If the user
would like to automatically turn store exceptions into log messages
they can use the L<Starch::Plugin::LogStoreExceptions> plugin.



=head2 REAPING EXPIRED SESSIONS

Stores may choose to support an interface for deleting old session data
suitable for a cronjob.  To do this two methods must be declared:

    sub can_reap_expired { 1 }
    
    sub reap_expired {
        my ($self) = @_;

        # Do whatever it takes to delete expired session data.
        ...
        # and, call $self->log() at important moments so that user
        # can see some progress.

        return;
    }

The actual implementation of how to reap old session data is a per-store
and is something that will differ greatly between them.

Consider adding extra arguments to your store class to control how session
reaping functions.  For example, a DBI store may allow the user to reap
the sessions in batches, and a DynamoDB store may allow the user to specify
a secondary global index to do the scan on.



=head1 INTERNAL STRUCTURE

                                                          +------+
                                                          v      |
    +------------------------+       +------------------------+  |
    |      1. manager        | ----> |       3. store         |--+
    |     (Starch)      | < - - |  (Starch::Store)  |
    +------------------------+       +------------------------+
                ^    |
                |    |
                |    +---------------------------+
                |                                V
    +------------------------+       +------------------------+
    |      4. session        |       |      2. factory        |
    | (Starch::Session) |       | (Starch::Factory) |
    +------------------------+       +------------------------+

This diagram shows which objects hold references to other objects.  Solid
lines depict a hard reference while dashed lines depict a weak reference.
Weak references are used to avoid memory leaks.

=over

=item 1.

B<manager> - The manager is the entry point for configuration and retrieving
session objects.  It holds a strong reference to the factory and the store.
The manager doesn't have much logic in and of itself, as most of the compile-time
work is handled by the factory, and the run-time work by the sessions and store.

=item 2.

B<factory> - The factory handles constructing anonymous classes from base
classes and roles.

=item 3.

B<store> - The store does all of the backend heavy-lifting.  It holds a
weak reference to the manager so that it can, primarly, get at the factory
object and create sub-stores.  The L<Starch::Store::Layered> store depends
on this functionality to create the inner and outer sub-stores.

=item 4.

B<session> - The session provides the run-time public interface to the store
and other parts of starch.  It holds a strong reference to the manager.

=back



=head1 AUTHORS AND LICENSE

See L<Starch/AUTHOR>, L<Starch/CONTRIBUTORS>, and L<Starch/LICENSE>.



=cut

