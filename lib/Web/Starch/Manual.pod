
=pod



=head1 NAME

Web::Starch::Manual - Organized collection of Web::Starch documentation.

=head1 INTRODUCTION

Welcome to Starch, a fancy implementation agnostic session manager.
Sessions are server-side buckets of arbitrary information which is
tracked by the user's web browser (or mobile application, or...).
Sessions typically store things like whether the user is logged in,
which user they are, referer/source information, transient information
which is stored when a user registers, and many other purposes.

Documentation for extending Starch can be found at
L<Web::Starch::Manual::Extending>.

Typically you'll be integrating Starch with a web framework such as
L<Catalyst> (see L</INTEGRATIONS> for other frameworks).  Whichever
integration you are using it will likely pass-through arguments to
the underlying L<Web::Starch> object and provide a thin layer over
the L<Web::Starch::Session> objects.  This documentation will be using
the core Starch classes for examples.

C<Web::Starch> is an attempt at creating a standalone session management
system which:

=over

=item *

Is as fast as possible by limiting method calls, implementing
lazy-loading wherever it can be done, and using libraries which
exhibit run-time effeciences which beat out their competitors.

=item *

Reduces data store reads and writes to just the most essential.

=item *

Is independent from any particular framework (such as Catalyst or
Plack).

=item *

Provides a straight-forward and powerful mechanism for customizing just
about any part of Starch via stores and plugin bundles.

=item *

Is easy to understand due to everything being well documented,
hyper-linked, and containing thorough examples and tests.

=back

There are many L</ALTERNATIVES> to Stach to choose from, all of which
Starch was inspired from and hopes to be a superior choice to.



=head1 BASIC USAGE

When setting up you need to, at a minimum, define a store:

    my $starch = Web::Starch->new(
        store => { class=>'::Memory' },
    );

A store is a hash ref of arguments which are used for constructing the
store object.  A store object implements a very simple interface for
setting, getting, and removing session data.  Beyond defining the
store you will not be interacting with it as the L<Web::Starch::Session>
objects does all the store interaction for you.

When defining the store you must specify at least the C<class>
argument which determines the store class to use.  This class name
can be relative to C<Web::Starch::Store> so that if you specify
C<::Memory>, as in the example above, it will be resolved to the
L<Web::Starch::Store::Memory> class.  An absolute store class name
may be used without the leading C<::> if you have a custom store in
a different namespace.

Now that you have the C<$starch> object you can create a session:

    my $session = $starch->session();

This creates a new L<Web::Starch::Session> object which you can then
interact with:

    $session->data->{some_key} = 'some_value';

The L<Web::Starch::Session/data> attribute is a writeable hash ref
which can contain any data you want.  This is the data which will
be stored by, and retrieved from, the store.  Once you're done
making changes to the data, call save:

    $session->save();

This stores the session data in the store.

Each session gets assigned a session ID automatically which can be
used to retrieve the session data at a later time.  The session ID
is a randomly generated SHA-1 hex digest.

    my $id = $session->id();

To retrieve a previously saved session pass the session ID to the
Starch session method:

    my $session = $starch->session( $id );

And now you can access the data you previously saved:

    print $session->data->{some_key}; # "some_value"

Your framework integration, such as L<Catalyst::Plugin::Starch>,
will wrap up and hide away most of these details from you, but
its still good to know what is happening behind the scenes.



=head1 EXPIRATION

Expiration can be specified globaly, when instantiating the L<Web::Starch>
object, per-session, and per-store.  The expires value has
various properties and behaviors that is important to understand:

=over

=item *

The C<expires> field is always specified as the number of seconds before
the session will expire.

=item *

The L<Web::Starch> class accepts an C<expires> argument which is used
as the default expires for new session objects and used as the expiration
for cookies via L<Web::Starch::Plugin::CookieArgs>.

=item *

Sessions have an C<expires> argument which defaults to the value of
the global expires set in the L<Web::Starch> object.  Each session
can then have their individual expire extended or reduced via the
L<Web::Starch::Session/set_expires> method.

=item *

Stores may have a C<max_expires> argument passed to them.  If the per-session
expires is larger than the store's max_expires then the session's expires will
be replaced with the store's max_expires when writing the data to the store.

=back



=head1 LOGGING

Starch has built-in logging facilities via L<Log::Any>.  By default,
not much is logged.  In fact there is only one situation when a message
will be logged.  When a session object goes out of scope, is dirty (the
data has been changed), and has not been saved, then an error message
will be logged which will look something like:

    Web::Starch session cf1a6abd623f019df53d9a69033b4472366e4afe was changed and not saved.

If you do not setup a log adapter then these log messages will disappear
into the void.  Read the L<Log::Any> documentation for instructions for
configuring an adapter to capture the log output.

The L<Web::Starch::Plugin::Trace> plugin adds a bunch of additional
logging output useful for development.



=head1 METHOD PROXIES

The Starch manager (L<Web::Starch>) and stores support method proxies
out of the box for all arguments passed to them.  A method proxy is
an array ref which is lightly inspired by JSON references.  This array
ref must have the string C<&proxy> as the first value, a package name
as the second value, a method name as the third value, and any number
of arguments to pass to the method after that:

    [ '&proxy', $package, $method, @args ]

Method proxies are really useful when you are configuring Starch from
static configuration where you cannot dynamically pass a value from Perl.

An example from L<Web::Starch::Store::CHI> illustrates how this works:

    my $starch = Web::Starch->new(
        store => {
            class => '::CHI',
            chi => ['&proxy', 'My::CHI::Builder', 'get_chi'],
        },
    );

This will cause C<My::CHI::Builder> to be loaded, if it hasn't already, and then
C<My::CHI::Builder-E<gt>get_chi()> will be called and the return value used as
the value for the C<chi> argument.

Another practical example of using this is with L<DBI> where normally
you would end up making a separate connection to your database for sessions.
If your session database is the same database as you use for other things
it may make sense to use the same C<$dbh> for both so that you do not
double the number of connections you are making to your database.

Method proxies can be used with the manager and store objects at any point in
their arguments.  For example, if you have Perl code that builds the Starch
configuration from the ground up you could:

    my $starch = Web::Starch->new(
        [ '&proxy', 'My::Starch::Config', 'get_config' ],
    );

Which will call C<get_config> on the C<My::Starch::Config> package and use its
return value as the arguments for instantiating the Starch object.



=head1 PERFORMANCE

On a decently-specced developer laptop Starch adds, at most, one half of one
millisecond to every HTTP request.  This non-scientific benchmark was done using
the C<Memory> store and a contrived example of the typical use of a session.

Starch is meant to be as fast as possible while still being flexible.
Due to Starch avoiding having many dependencies, and having zero
non-core XS dependencies, there are still same areas which could be
slightly faster.  At this time there is one plugin which will provide a
relatively large performance gain, L<Web::Starch::Plugin::Sereal>.  This
is relative as using this plugin might, if you're lucky, shave one tenth
of one millisecond off of every HTTP request that uses sessions.

Starch has gone through the wringer performance wise and there just are
not many performance gains to be eeked out of Starch.  Instead you'll
likely find that your time in Starch is primarly spent in your store.
So, when setting up your sessions, picking a store is the most important
decision you can make performance wise.



=head1 STORES

These stores are included with the C<Web-Starch> distribution:

=over

=item *

L<Web::Starch::Store::Memory>

=item *

L<Web::Starch::Store::Layered>

=back

These stores are distributed separately on CPAN:

=over

=item *

L<Web::Starch::Store::AmazonDynamoDB>

=item *

L<Web::Starch::Store::CHI>

=back

More third-party stores can be found on
L<meta::cpan|https://metacpan.org/search?q=Web%3A%3AStarch%3A%3AStore>.



=head1 PLUGINS

Plugins alter the behavior of the manager (L<Web::Starch>),
session (L<Web::Starch:Session>), and store (L<Web::Starch::Store>)
objects.  To use a plugin call the C<new_with_plugins> constructor
instead of C<new>:

    my $starch = Web::Starch->new_with_plugins(
        ['::Trace'],
        store => { ... },
        ...,
    );

These plugins are included with the C<Web-Starch> distribution:

=over

=item *

L<Web::Starch::Plugin::AlwaysLoad>

=item *

L<Web::Starch::Plugin::CookieArgs>

=item *

L<Web::Starch::Plugin::LogStoreExceptions>

=item *

L<Web::Starch::Plugin::RenewExpiration>

=item *

L<Web::Starch::Plugin::TimeoutStores>

=item *

L<Web::Starch::Plugin::Trace>

=back

These plugins are distributed separately on CPAN:

=over

=item *

L<Web::Starch::Plugin::Sereal>

=back

More third-party plugins can be found on
L<meta::cpan|https://metacpan.org/search?q=Web%3A%3AStarch%3A%3APlugin>.



=head1 INTEGRATIONS

The following Starch integrations are available:

=over

=item *

L<Catalyst::Plugin::Starch>

=back

Integrations for L<Plack>, L<Dancer2>, L<Mojolicious>, etc will
be developed as needed by the people that need them.



=head1 ALTERNATIVES

=over

=item *

L<CGI::Session>

=item *

L<Data::Session>

=item *

L<HTTP::Session>

=item *

L<Catalyst::Plugin::Session>

=item *

L<Plack::Middleware::Session>

=item *

L<Dancer::Session>

=item *

L<Mojolicious::Sessions>

=item *

L<MojoX::Session>

=back



=head1 DEPENDENCIES

The C<Web-Starch> distribution is shipped with minimal dependencies
and with no non-core XS requirements.  This is important for many people.



=head1 SUPPORT

Please submit bugs and feature requests on GitHub issues:

L<https://github.com/bluefeet/Web-Starch/issues>



=head1 AUTHOR AND LICENSE

See L<Web::Starch/AUTHOR> and L<Web::Starch/LICENSE>.



=cut

