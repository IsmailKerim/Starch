=pod

=head1 NAME

Web::Starch - Implementation independent session management.

=head1 SYNOPSIS

    my $starch = Web::Starch->new(
        expires => 60 * 15, # 15 minutes
        store => {
            class   => '::Memory',
        },
    );
    my $new_session = $starch->session();
    my $existing_session = $starch->session( $key );

=head1 DESCRIPTION

This module provides a generic interface to managing sessions, AKA the
session manager.

Please see L<Web::Starch::Manual> for some good starter documentation.

This class consumes the L<Web::Starch::Component> role.

=head1 PLUGINS

    my $starch = Web::Starch->new_with_plugins(
        ['::CookieArgs'],
        store => { class=>'::Memory' },
        cookie_name => 'my_session',
    );
    my $session = $starch->session();
    print $session->cookie_args->{name}; # my_session

Starch plugins are applied using the C<new_with_plugins> constructor method.
The first argument is an array ref of plugin names.  The plugin names can
be fully qualified, or relative to the C<Web::Starch::Plugin> namespace.
A leading C<::> signifies that the plugin's package name is relative.

=head1 REQUIRED ARGUMENTS

=head2 store

The L<Web::Starch::Store> storage backend to use for persisting the session
data.  A hashref must be passed and it is expected to contain at least a
C<class> key and will be converted into a store object automatically.

The C<class> can be fully qualified, or relative to the C<Web::Starch::Store>
namespace.  A leading C<::> signifies that the store's package name is relative.

The class must implement the C<set>, C<get>, and C<remove> methods.  Typically
a store class consumes the L<Web::Starch::Store> role which enforces this interface.

To find available stores you can search
L<meta::cpan|https://metacpan.org/search?q=Web%3A%3AStarch%3A%3AStore>.

Stores can be layered, such as if you want to put a cache in front of your
session database by using the L<Web::Starch::Store::Layered> store.

=head1 OPTIONAL ARGUMENTS

=head1 expires

How long, in seconds, a session should live after the last time it was
modified.  Defaults to C<60 * 60 * 2> (2 hours).

This value is used when constructing the L</store> to set the default
expires value for stores if no expires was specified for them.

The L<Web::Starch::Plugin::CookieArgs> plugin also uses this as the
default value for the C<cookie_expires> argument.

You can set this argument to C<undef> which has different meaning for
stores than cookies.  For stores this typically means "expire whenever
you want to" and for cookies means "expire when the session (browser/tab)
is closed".  Some stores, such as Memcached, function well with undefined
expirations as they use an LRU to automatically expire data, other stores
not so much.  Read the documentation for your store to determine how
its expiration strategy works.

=head1 digest_algorithm

The L<Digest> algorithm which L<Web::Starch::Session/digest> will use.
Defaults to C<SHA-1>.

=head2 factory

The underlying L<Web::Starch::Factory> object which manages all the plugins
and session/store object construction.

=head1 METHODS

=head2 session

    my $new_session = $starch->session();
    my $existing_session = $starch->session( $id );

Returns a new L<Web::Starch::Session> (or whatever L<Web::Starch::Factory/session_class>
returns) object for the specified session ID.

If no ID is specified, or is undef, then an ID will be automatically generated.

Additional arguments can be passed after the ID argument.  These extra
arguments will be passed to the session object constructor.

=head1 TODO

=over

=item *

A plugin which turns the data in the session into an object so that
session data is declared and validated.

=item *

A store plugin which segments the data into various buckets for storage.
This can substantially reduce race conditions as unrelated data would
be saved independently.

=item *

Stores which support partial writes should support this through Starch
too.  This can greatly reduce race conditions (which inversly increases
consistency issues), and could reduce resource usage.

=back

=head1 DEPENDENCIES

The C<Web-Starch> distribution is shipped with minimal dependencies
and with no non-core XS requirements.  This is important for many people.

=head1 SUPPORT

Please submit bugs and feature requests on GitHub issues:

L<https://github.com/bluefeet/Web-Starch/issues>

=head1 ALTERNATIVES

=over

=item *

L<CGI::Session>

=item *

L<Data::Session>

=item *

L<HTTP::Session>

=item *

L<Catalyst::Plugin::Session>

=item *

L<Plack::Middleware::Session>

=item *

L<Dancer::Session>

=item *

L<Mojolicious::Sessions>

=item *

L<MojoX::Session>

=back

Unlike these modules this module tries to make as little assumptions
as possible and just provides raw session management with the ability
for implementors to alter behaviors as they see fit.

=head1 AUTHOR

Aran Clary Deltac <bluefeetE<64>gmail.com>

=head1 ACKNOWLEDGEMENTS

Thanks to L<ZipRecruiter|https://www.ziprecruiter.com/>
for encouraging their employees to contribute back to the open
source ecosystem.  Without their dedication to quality software
development this distribution would not exist.

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
